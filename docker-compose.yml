version: "3.9"
services:

  app:
    depends_on:
      postgres:
        condition: service_healthy
    image: svhd/logto:${LOGTO_TAG}
    entrypoint: ["sh", "-c", "npm run cli db seed -- --swe && npm start"]
    #ports:
    #  - 3001:3001
    #  - 3002:3002
    networks:
      - default
      - web
    expose:
      - 3001
      - 3002
    environment:
      - TRUST_PROXY_HEADER=1
      - DB_URL=postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@postgres:5432/logto
      # Mandatory for GitPod to map host env to the container, thus GitPod can dynamically configure the public URL of Logto;
      # Or, you can leverage it for local testing.
      - ENDPOINT=https://logto.example.com
      - ADMIN_ENDPOINT=https://admin.logto.example.com
    labels:
      caddy: logto.internetapi.cn
      caddy.reverse_proxy: '{{upstreams 3001}}'
      caddy_0: admin.logto.internetapi.cn
      caddy_0.reverse_proxy: '{{upstreams 3002}}'

  postgres:
    image: postgres:${POSTGRES_TAG}
    # user: postgressvhd
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - "logto_postgres:/var/lib/postgresql/data:rw"

volumes:
  logto_postgres:
    driver_opts:
      type: none
      device: ${VOLUMES_ROOT}/postgres
      o: bind

networks:
  web:
    external: true
